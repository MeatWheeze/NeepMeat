plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'

	id "com.modrinth.minotaur" version "2.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
	maven { url "https://maven.shedaniel.me/" }
	maven { url 'https://www.jitpack.io' }
}

dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'

    // To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

//	implementation "com.github.chocohead:fabric-asm:${project.mm_version}"

	modImplementation 'software.bernie.geckolib:geckolib-fabric-1.18:3.0.78'

	modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${project.rei_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.17 (21w19a) upwards uses Java 16.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

sourceSets {
	main{
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

loom {
	runs {
		datagen {
			server()

			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"

			runDir "build/datagen"
		}
	}
	accessWidenerPath = file("src/main/resources/neepmeat.accesswidener")
}
assemble.dependsOn runDatagen

import com.modrinth.minotaur.dependencies.ModDependency

modrinth {
	token = token = System.getenv("MODRINTH_TOKEN")
	projectId = 'Hagcl1FT'
//	versionNumber = '0.1.2'
//	versionName = 'v'
	versionType = "alpha"
	uploadFile = remapJar // Tells Minotaur to use the remapped jar
	gameVersions = ['1.18', '1.18.1', '1.18.2'] // An array of game versions the version supports
	loaders = ['fabric']
	dependencies = [
			new ModDependency('P7dR8mSH', 'required'), // Fabric API
			new ModDependency('8BmcQJ2H', 'required'), // Geckolib
			new ModDependency('nfn13YXA', 'optional') // REI
	]
}