plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'

	id "com.modrinth.minotaur" version "2.+"
}

sourceCompatibility = JavaVersion.VERSION_19
targetCompatibility = JavaVersion.VERSION_19

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

//	maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' } // Geckolib
	maven {
		name = 'GeckoLib'
		url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
		content {
			includeGroupByRegex("software\\.bernie.*")
			includeGroup("com.eliotlash.mclib")
		}
	}

	maven { url "https://maven.architectury.dev/" } // Architectury (REI)
	maven { url "https://maven.shedaniel.me/" } // REI
	maven { url 'https://www.jitpack.io' }
	maven { url 'https://maven.ladysnake.org/releases' } // Cardinal Components
	maven { url "https://maven.terraformersmc.com/" } // EMI
	maven { url "https://maven.tterrag.com/" } // Flywheel
//	maven { url "https://maven.saps.dev/minecraft" } // KubeJS
}

configurations.configureEach {
	resolutionStrategy {
		// Some libraries (cardinal-components) depend on older versions of Fabric. Gradle pulls the older version
		// and Fabric will detect the duplicate loaders and refuse to launch.
		force "net.fabricmc:fabric-loader:${project.loader_version}"
	}
}



dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'

	// Base things
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Geckolib
	modImplementation "com.eliotlash.mclib:mclib:20"
	modImplementation "software.bernie.geckolib:geckolib-fabric-${project.geckolib_version}"

	// Cardinal Components
	modApi include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
	modApi include("dev.onyxstudios.cardinal-components-api:cardinal-components-chunk:${project.cca_version}")
	modApi include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}")
	modApi include("dev.onyxstudios.cardinal-components-api:cardinal-components-item:${project.cca_version}")
	modApi include("dev.onyxstudios.cardinal-components-api:cardinal-components-block:${project.cca_version}")

	// Flywheel
	// Couldn't find Fabric releases that were accessible to the average user, so I assume that JiJ is the only way.
	modApi include("com.jozufozu.flywheel:flywheel-fabric-${project.flywheel_mc_version}:${project.flywheel_version}")

	// REI
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${project.rei_version}"

	// Myron
//	modImplementation include("dev.monarkhes:myron-neepmeat:${project.myron_version}")
	modImplementation include("com.github.MeatWheeze:myron-neepmeat:${project.myron_version}")

	// EMI
	modCompileOnly "dev.emi:emi-fabric:${project.emi_version}:api"

	// KubeJS
//	modCompileOnly "dev.latvian.mods:kubejs-fabric:${project.kubejs_version}"

	if (project.recipe_viewer == "rei") {
		modRuntimeOnly "dev.architectury:architectury-fabric:${project.architectury_version}"
		modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
	}
	if (project.recipe_viewer == "emi") {
		modLocalRuntime "dev.emi:emi-fabric:${project.emi_version}"
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

sourceSets {
	main{
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

loom {
//	splitEnvironemntSourceSets()
	runs {
		datagen {
			server()

			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"

			runDir "build/datagen"
		}
	}
	accessWidenerPath = file("src/main/resources/neepmeat.accesswidener")
}
assemble.dependsOn runDatagen

import com.modrinth.minotaur.dependencies.ModDependency

modrinth {
	token = token = System.getenv("MODRINTH_TOKEN")
	projectId = 'Hagcl1FT'
	versionType = "beta"
	uploadFile = remapJar // Tells Minotaur to use the remapped jar
	gameVersions = ['1.19.2'] // An array of game versions the version supports
	loaders = ['fabric']
	dependencies = [
			new ModDependency('P7dR8mSH', 'required'), // Fabric API
			new ModDependency('8BmcQJ2H', 'required'), // Geckolib
			new ModDependency('nfn13YXA', 'optional'), // REI
			new ModDependency('fRiHVvU7', 'optional') // REI
	]
}